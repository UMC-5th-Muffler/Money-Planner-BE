# 1 워크플로의 이름 지정
name: CI

# 2 워크플로가 시작될 조건 지정
on:
  pull_request:
    branches: [ release ]
  push:
    branches: [ release ]
jobs:
  build-and-test:
    runs-on: ubuntu-22.04 # 3 실행 환경 지정
    #4 실행스텝지정
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '11'

      - name: Generate Envirvonment Variables File for Production
        run: |
          echo "DB_URL=$DB_URL" >> .env
          echo "DB_USERNAME=$DB_USERNAME" >> .env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env
          echo "DB_DLL_MODE=$DB_DLL_MODE" >> .env
          echo "JWT_SECRET=$JWT_SECRET" >> .env
          echo "KAKAO_CLIENT_SECRET=$KAKAO_CLIENT_SECRET" >> .env
          echo "KAKAO_CLIENT_ID=$KAKAO_CLIENT_ID" >> .env
          echo "KAKAO_REDIRECT_URI=$KAKAO_REDIRECT_URI" >> .env
          echo "$FIREBASE_PRIVATE_KEY" >> ./src/main/resources/firebase-private-key.json

        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DLL_MODE: ${{ secrets.DB_DLL_MODE }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          KAKAO_CLIENT_SECRET : ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_CLIENT_ID : ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          FIREBASE_PRIVATE_KEY : ${{ secrets.FIREBASE_PRIVATE_KEY }}

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name : Discord Build Alarm when fail
        uses : sarisia/actions-status-discord@v1
        if : failure()
        with :
          webhook: ${{ secrets.DISCORD_BE_WEB_HOOK_URL }}
          status: ${{ job.status }}
          title: "build"
          description: "build fail"
          color: 0xff0000
          username: Github Actions

      - name : Discord Build Alarm when success
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_BE_WEB_HOOK_URL }}
          status: ${{ job.status }}
          title: "test"
          description: "test success"
          color: 0x00ff00
          username: Github Actions

      - name : Test
        run: ./gradlew test

      - name: Discord Test Alarm when fail
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_BE_WEB_HOOK_URL }}
          status: ${{ job.status }}
          title: "test"
          description: "test fail"
          color: 0xff0000
          username: Github Actions

      - name: Discord Test Alarm when success
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_BE_WEB_HOOK_URL }}
          status: ${{ job.status }}
          title: "test"
          description: "test success"
          color: 0x00ff00
          username: Github Actions

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    runs-on: ubuntu-22.04

    steps:
    # (4) AWS인증 (IAM사용자 Access Key, Secret Key활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
    # (5)빌드 결과물을 S3버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
         --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }} \
         --s3-location s3://${{secrets.S3_BUCKET_NAME}}/$GITHUB_SHA.zip \
         --source .
    # (6) S3버킷에 있는 파일을 대상으로 CodeDeploy실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment --application-name ${{ secrets.CODE_DEPLOY_APPLICATION_NAME }} --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ secrets.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} --s3-location bucket=${{secrets.S3_BUCKET_NAME}},key=$GITHUB_SHA.zip,bundleType=zip

    - name: Discord Deploy Alarm when fail
      uses: sarisia/actions-status-discord@v1
      if: failure()
      with:
        webhook: ${{ secrets.DISCORD_BE_WEB_HOOK_URL }}
        status: ${{ job.status }}
        title: "deploy"
        description: "deploy fail"
        color: 0xff0000
        username: Github Actions

    - name: Discord Deploy Alarm when success
      uses: sarisia/actions-status-discord@v1
      if: success()
      with:
        webhook: ${{ secrets.DISCORD_BE_WEB_HOOK_URL }}
        status: ${{ job.status }}
        title: "deploy"
        description: "deploy success"
        color: 0x00ff00
      username: Github Actions